#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const { glob } = require('glob');

const DOCS_PATH = './docs';

async function generateSidebar() {
  console.log('ðŸ”„ Generating sidebar configuration from existing files...');
  
  // Get all markdown files
  const files = await glob('**/*.md', { cwd: DOCS_PATH });
  
  console.log(`ðŸ“„ Found ${files.length} files`);
  
  // Sort files for better organization
  files.sort();
  
  // Generate sidebar structure
  const sidebar = [
    'intro'
  ];
  
  // Add master index if it exists
  if (files.includes('00-master-index.md')) {
    sidebar.push('00-master-index');
  }
  
  // Group files by tome/section
  const tomes = {
    'tome-i': [],
    'tome-ii': [],
    'tome-iii': [],
    'tome-iv': [],
    'features': [],
    'foundations': [],
    'software-tools': []
  };
  
  const otherFiles = [];
  
  files.forEach(file => {
    // Remove .md extension for sidebar reference
    const fileId = file.replace('.md', '');
    
    // Skip intro and master index as they're handled separately
    if (fileId === 'intro' || fileId === '00-master-index') return;
    
    if (file.startsWith('01-tome-i-the-vision/')) {
      tomes['tome-i'].push(fileId);
    } else if (file.startsWith('02-tome-ii-the-architecture/')) {
      tomes['tome-ii'].push(fileId);
    } else if (file.startsWith('03-tome-iii-the-operations/')) {
      tomes['tome-iii'].push(fileId);
    } else if (file.startsWith('04-tome-iv-the-implementation/')) {
      tomes['tome-iv'].push(fileId);
    } else if (file.startsWith('features/')) {
      tomes['features'].push(fileId);
    } else if (file.startsWith('foundations/')) {
      tomes['foundations'].push(fileId);
    } else if (file.startsWith('software-tools/')) {
      tomes['software-tools'].push(fileId);
    } else {
      otherFiles.push(fileId);
    }
  });
  
  // Build tome sections
  if (tomes['tome-i'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Tome I: The Vision',
      items: tomes['tome-i']
    });
  }
  
  if (tomes['tome-ii'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Tome II: The Architecture', 
      items: tomes['tome-ii']
    });
  }
  
  if (tomes['tome-iii'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Tome III: The Operations',
      items: tomes['tome-iii']
    });
  }
  
  if (tomes['tome-iv'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Tome IV: The Implementation',
      items: tomes['tome-iv']
    });
  }
  
  if (tomes['features'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Features',
      items: buildFeaturesSidebar(tomes['features'])
    });
  }
  
  if (tomes['foundations'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Foundations',
      items: tomes['foundations']
    });
  }
  
  if (tomes['software-tools'].length > 0) {
    sidebar.push({
      type: 'category',
      label: 'Software Tools',
      items: tomes['software-tools']
    });
  }
  
  // Add any other files
  otherFiles.forEach(file => sidebar.push(file));
  
  // Generate the TypeScript file
  const sidebarContent = `import type {SidebarsConfig} from '@docusaurus/plugin-content-docs';

// This file is auto-generated by generate-sidebar.js
// Do not edit manually - run 'node generate-sidebar.js' to regenerate

const sidebars: SidebarsConfig = {
  tutorialSidebar: ${JSON.stringify(sidebar, null, 4)},
};

export default sidebars;
`;

  await fs.writeFile('./sidebars.ts', sidebarContent);
  console.log('âœ… Generated sidebars.ts with existing files only');
}

function buildFeaturesSidebar(featureFiles) {
  const features = [];
  
  // Group features by category
  const categories = {};
  
  featureFiles.forEach(file => {
    const parts = file.split('/');
    if (parts.length > 1) {
      const category = parts[1]; // e.g., '01-creative-control'
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(file);
    } else {
      features.push(file);
    }
  });
  
  // Add overview files first
  featureFiles.filter(f => f.includes('features-overview') || f.includes('readme')).forEach(file => {
    features.push(file);
  });
  
  // Build category structure
  Object.entries(categories).forEach(([category, files]) => {
    let label = category;
    
    // Convert category names to readable labels
    switch (category) {
      case '01-creative-control':
        label = 'Creative Control';
        break;
      case '02-preservation-permanence':
        label = 'Preservation & Permanence';
        break;
      case '03-research-reproducibility':
        label = 'Research & Reproducibility';
        break;
      case '04-economic-infrastructure':
        label = 'Economic Infrastructure';
        break;
      case '05-legal-rights':
        label = 'Legal Rights';
        break;
      case '06-education-cultural':
        label = 'Education & Cultural';
        break;
      case '07-library-book-ecosystem':
        label = 'Library & Book Ecosystem';
        break;
      case '08-emerging-capabilities':
        label = 'Emerging Capabilities';
        break;
    }
    
    features.push({
      type: 'category',
      label: label,
      items: files.sort()
    });
  });
  
  return features;
}

if (require.main === module) {
  generateSidebar().catch(console.error);
}

module.exports = { generateSidebar };